<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用搜索算法解决八数码问题</title>
    <link href="/2021/10/19/8puzzle/"/>
    <url>/2021/10/19/8puzzle/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、问题描述与分析"><a href="#一、问题描述与分析" class="headerlink" title="一、问题描述与分析"></a>一、问题描述与分析</h2><p>八数码问题就是在一个大小为3×3的九宫格上,放置8块编号为1-8的木块，九宫格中有一个空格，周围(上下左右)的木块可以和空格交换位置。对于问题，给定一个初始状态，目标状态是期望达到1-8顺序排列的序列，并且空格在右下角，问题的实质就是寻找一个合法的移动序列。</p><p><img src="http://img.enderfga.cn/img/image-20211018144301406.png" alt="image-20211018144301406"></p><p>不是每一个给定的初始状态都存在解，在分析之前，引入线性代数中的几个概念：</p><ul><li>逆序数：在一个排列中，如果一对数字的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中序的总数就称为这个排列的逆序数。</li><li>奇排列：逆序数为奇数的排列称为奇排列</li><li><p>偶排列：逆序数为偶数的排列称为偶排列</p><p>使用线性代数理论可以得知，对于任意目标状态，只有初始状态的逆序数和目标状态的逆序数的奇偶性相同才有解(逆序数计算不包括0的逆序数)。</p><p>证明：</p><p>∵八数码问题每一个步骤都可以视作 0 的移动， 0 的移动至多有四个可能的方向<br>又∵ 0 是序列中最小的数，序列的奇偶性不会跟随 0 的移动而改变<br>且对于其余数字而言，要么与 0 互换，要么跨过两个数字和 0 互换<br>∴逆序数的改变只有变化为 0、 -2、 +2 这三种情况<br>又∵奇数±偶数=奇数，偶数±偶数=偶数<br>∴序列在变换过程中，它的奇偶性不会发生改变<br>∴如果初始序列和目标序列不是同为奇排列或者偶排列，那么这个八数码问题就是无解的。</p></li></ul><p>以图中所给状态为例，初始状态的逆序数t=0+6+5+1+2+1+1=16，目标状态的逆序数t’=0，故有解。</p><h2 id="二、深度优先遍历搜索-DFS"><a href="#二、深度优先遍历搜索-DFS" class="headerlink" title="二、深度优先遍历搜索(DFS)"></a>二、深度优先遍历搜索(DFS)</h2><h3 id="2-1算法介绍"><a href="#2-1算法介绍" class="headerlink" title="2.1算法介绍"></a>2.1算法介绍</h3><p><strong>深度优先搜索算法</strong>（英语：Depth-First-Search，DFS）是一种用于遍历或搜索树或图的算法。这个算法会尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止，属于盲目搜索。以下图为例，DFS方法首先从根节点1开始，其最终得到的遍历顺序是“1-2-3-4-5-6-7-8-9-10-11-12”。（假定左分枝和右分枝中优先选择左分枝）</p><p><img src="http://img.enderfga.cn/img/tree.png" alt="节点搜索的顺序"></p><p>我们将其应用于八数码问题的解决。解八数码问题实际上就是找出从初始状态到达目标状态所经过的一系列中间过渡状态。前文提到DFS遍历的树是已经存在的，我们只需要按照规定的遍历方法就能完成遍历，而对于八数码问题，没有已经存在的路径供我们遍历，需要我们从初始状态向下延伸（也就是上下左右移动）才能构造出类似的树。</p><p><img src="http://img.enderfga.cn/img/DFS.png" alt="DFS"></p><p>以上图为例。在使用DFS进行搜索时，每个状态都会按照一定的顺序进行上下左右移动（在上图中是下、左、右、上的顺序），一次移动后会产生一个新的状态，然后以新状态为起点继续按约定的顺序（例如先向下）移动。终止的条件是找到解或者达到深度界限。那么如果按照图中下、左、右、上的顺序搜索后的结果将会是最左边的一条路一直是优先向下移动，如果不能向下则依次会是左、右、上的一种。</p><h3 id="2-2实验代码"><a href="#2-2实验代码" class="headerlink" title="2.2实验代码"></a>2.2实验代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//初始状态压入队列</span><br>    D_open.<span class="hljs-built_in">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">borad</span>(<span class="hljs-literal">NULL</span>, start, <span class="hljs-number">0</span>, INT_MAX - <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DFS：\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (!D_open.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-comment">//弹出一个状态</span><br>        borad *cur = D_open.<span class="hljs-built_in">top</span>();<br>           D_open.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">//if (cur-&gt;depth == 5) &#123;</span><br>        <span class="hljs-comment">//    break;</span><br>        <span class="hljs-comment">//&#125;</span><br>        <span class="hljs-comment">//与目标状态的距离，为0即到达目标状态</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hn</span>(cur-&gt;status, target) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;到达目标状态\nclose表大小为%d\n目标状态深度为%d\n\n&quot;</span>, close.<span class="hljs-built_in">size</span>(), cur-&gt;depth);<br>            <span class="hljs-comment">//printans(cur);</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//存放int格式的状态</span><br>        <span class="hljs-keyword">int</span> intstatus = <span class="hljs-built_in">status2int</span>(cur-&gt;status);<br>        <span class="hljs-comment">//出现重复状态</span><br>        <span class="hljs-keyword">if</span> (close.<span class="hljs-built_in">count</span>(intstatus)) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">//加入close表，表示已访问过</span><br>        close.<span class="hljs-built_in">insert</span>(intstatus);<br><br>        <span class="hljs-comment">//获得0的坐标</span><br>        <span class="hljs-keyword">int</span> zeroindex = <span class="hljs-built_in">getindex</span>(cur-&gt;status, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-comment">//新建节点，复制当前棋盘状态，深度+1</span><br>            borad *temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">borad</span>(cur, cur-&gt;status, cur-&gt;depth + <span class="hljs-number">1</span>, INT_MAX - <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//0向四个方向移动</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">swapnum</span>(zeroindex, zeroindex + go[i], temp-&gt;status)) &#123;<br>                <span class="hljs-comment">//移动成功</span><br>                D_open.<span class="hljs-built_in">push</span>(temp);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//移动失败</span><br>                <span class="hljs-built_in"><span class="hljs-keyword">delete</span></span>(temp);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-3实验结果"><a href="#2-3实验结果" class="headerlink" title="2.3实验结果"></a>2.3实验结果</h3><p><img src="http://img.enderfga.cn/img/image-20211019153318548.png" alt="image-20211019153318548"></p><p>如图所示，深度优先算法在解决八数码问题时有一个致命缺点，就是必须设置一个深度界限，否则，搜索会一直沿着纵深方向发展，会一直无法搜索到解路径。即使加了限制条件，搜索到了解路径，解路径也不一定是最优解路径。</p><h3 id="2-4实验总结"><a href="#2-4实验总结" class="headerlink" title="2.4实验总结"></a>2.4实验总结</h3><ul><li>缺点：如果目标节点不在搜索进入的分支上，而该分支又是一个无穷分支,就得不到解,因此该算法是不完备的。</li><li>优点：如果目标节点在搜索进入的分支上，则可以较快得到解。</li></ul><h2 id="三、广度优先遍历搜索-BFS"><a href="#三、广度优先遍历搜索-BFS" class="headerlink" title="三、广度优先遍历搜索(BFS)"></a>三、广度优先遍历搜索(BFS)</h2><h3 id="3-1算法介绍"><a href="#3-1算法介绍" class="headerlink" title="3.1算法介绍"></a>3.1算法介绍</h3><p><strong>广度优先搜索算法</strong>（英语：Breadth-First-Search，缩写为BFS），又译作宽度优先搜索，或横向优先搜索，是一种图形搜索算法。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。BFS是一种盲目搜索法，目的是系统地展开并检查图中的所有节点，以找寻结果。</p><p>BFS会先访问根节点的所有邻居节点，然后再依次访问邻居节点的邻居节点，直到所有节点都访问完毕。在具体的实现中，使用open和closed两个表，open是一个队列，每次对open进行一次出队操作（并放入closed中），并将其邻居节点进行入队操作。直到队列为空时即完成了所有节点的遍历。closed表在遍历树时其实没有用，因为子节点只能从父节点到达。但在进行图的遍历时，一个节点可能会由多个节点到达，所以此时为了防止重复遍历应该每次都检查下一个节点是否已经在closed中了。 依旧以下图为例，BFS方法首先从根节点1开始，其最终得到的遍历顺序是“1-2-7-8-3-6-9-12-4-5-10-11”。可以看出来BFS进行遍历时是一层一层的搜索的。</p><p><img src="http://img.enderfga.cn/img/tree.png" alt="节点搜索的顺序"></p><p><img src="http://img.enderfga.cn/img/BFS.png" alt="BFS"></p><p>在应用BFS算法进行八数码问题搜索时需要open和closed两个表。首先将初始状态加入open队列，然后进行出队操作并放入closed中，对出队的状态进行扩展（所谓扩展也就是找出其上下左右移动后的状态），将扩展出的状态加入队列，然后继续循环出队-扩展-入队的操作，直到找到解为止。在上图这个例子中，红圈里的数字是遍历顺序。当找到解时一直往前找父节点即可找出求解的移动路线。</p><h3 id="3-2实验代码"><a href="#3-2实验代码" class="headerlink" title="3.2实验代码"></a>3.2实验代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//初始状态压入队列</span><br>    B_open.<span class="hljs-built_in">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">borad</span>(<span class="hljs-literal">NULL</span>, start, <span class="hljs-number">0</span>, INT_MAX - <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BFS：\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (!B_open.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-comment">//弹出一个状态</span><br>        borad* cur = B_open.<span class="hljs-built_in">front</span>();<br>        B_open.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">//与目标状态的距离，为0即到达目标状态</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hn</span>(cur-&gt;status, target) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;到达目标状态\nclose表大小为%d\n目标状态深度为%d\n\n&quot;</span>, close.<span class="hljs-built_in">size</span>(), cur-&gt;depth);<br>            <span class="hljs-comment">//printans(cur);</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//存放int格式的状态</span><br>        <span class="hljs-keyword">int</span> intstatus = <span class="hljs-built_in">status2int</span>(cur-&gt;status);<br>        <span class="hljs-comment">//出现重复状态</span><br>        <span class="hljs-keyword">if</span> (close.<span class="hljs-built_in">count</span>(intstatus)) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">//加入close表，表示已访问过</span><br>        close.<span class="hljs-built_in">insert</span>(intstatus);<br><br>        <span class="hljs-comment">//获得0的坐标</span><br>        <span class="hljs-keyword">int</span> zeroindex = <span class="hljs-built_in">getindex</span>(cur-&gt;status, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-comment">//新建节点，复制当前棋盘状态，深度+1</span><br>            borad* temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">borad</span>(cur, cur-&gt;status, cur-&gt;depth + <span class="hljs-number">1</span>, INT_MAX - <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//0向四个方向移动</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">swapnum</span>(zeroindex, zeroindex + go[i], temp-&gt;status)) &#123;<br>                <span class="hljs-comment">//移动成功</span><br>                B_open.<span class="hljs-built_in">push</span>(temp);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//移动失败</span><br>                <span class="hljs-built_in"><span class="hljs-keyword">delete</span></span>(temp);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//清空close表</span><br>    close.<span class="hljs-built_in">clear</span>();<br></code></pre></td></tr></table></figure><h3 id="3-3实验结果"><a href="#3-3实验结果" class="headerlink" title="3.3实验结果"></a>3.3实验结果</h3><p><img src="http://img.enderfga.cn/img/image-20211019153730600.png" alt="image-20211019153730600"></p><p>如图所示，广度优先算法成功找到了深度为22的最优解，但是close表是DFS中深度46312产生的大小为47788的close表的两倍多，由于𝐵𝐹𝑆算法进行的是盲目的搜索，没有考虑代价，而且利用了空间换取时间的策略，故空间也相对会有更大的复杂度。</p><h3 id="3-4实验总结"><a href="#3-4实验总结" class="headerlink" title="3.4实验总结"></a>3.4实验总结</h3><ul><li>缺点：当目标节点距离初始节点较远时会产生许多无用的节点，搜索效率低，只能适用于到达目标结点步数较少的情况。</li><li>优点：只要问题有解，则总可以得到解，而且是最短路径的解。</li></ul><h2 id="四、A-算法实现八数码问题"><a href="#四、A-算法实现八数码问题" class="headerlink" title="四、A*算法实现八数码问题"></a>四、A*算法实现八数码问题</h2><h3 id="4-1算法介绍"><a href="#4-1算法介绍" class="headerlink" title="4.1算法介绍"></a>4.1算法介绍</h3><p><strong>A*搜索算法</strong>（A* search algorithm）是一种在图形平面上，有多个节点的路径，求出最低通过成本的算法，也是许多其他问题的常用启发式算法。该算法综合了最良优先搜索和Dijkstra算法的优点：在进行启发式搜索提高算法效率的同时，可以保证找到一条最优路径（基于评估函数）。</p><p>在A*算法中，一个结点位置的好坏用估价函数来对它进行评估：</p><script type="math/tex; mode=display">f{}'\left ( n \right )=g{}'\left ( n \right )+h{}'\left ( n \right )</script><p>这里，f’(n)是估价函数，g’(n)是起点到终点的最短路径值(也称为最小耗费或最小代价)，h’(n)是n到目标的最短路经的启发值。由于这个f’(n)其实是无法预先知道的，因而实际上使用的是如下估价函数：</p><script type="math/tex; mode=display">f\left ( n \right )=g\left ( n \right )+h\left ( n \right )</script><p>这个公式遵循以下特性：</p><ul><li>如果g(n)为0，即只计算任意顶点n到目标的评估函数h(n)，而不计算起点到顶点n的距离，则算法转化为使用贪心策略的最良优先搜索，速度最快，但可能得不出最优解；</li><li>如果h(n)不大于顶点n到目标顶点的实际距离，则一定可以求出最优解，而且h(n)越小，需要计算的节点越多，算法效率越低，常见的评估函数有——欧几里得距离、曼哈顿距离、切比雪夫距离；</li><li>如果h(n)为0，即只需求出起点到任意顶点n的最短路径g(n)，而不计算任何评估函数h(n)，则转化为单源最短路径问题，即Dijkstra算法，此时需要计算最多的顶点；</li></ul><p>其中，g(n)是从初始结点到节点n的实际代价，h(n)是从结点n到目标结点的最佳路径的估计代价。在这里主要是h(n)体现了搜索的启发信息，因为g(n)是已知的。用f(n)作为f’(n)的近似，也即用g(n)代替g’(n)，h(n)代替h’(n)。这样必须满足两个条件：</p><ol><li>g(n)≥g’(n)(大多数情况下都是满足的，可以不用考虑)，且f必须保持单调递增；</li><li>h必须小于等于实际的从当前节点到达目标节点的最小耗费h(n)≤h’(n)。（可以证明应用这样的估价函数可以找到最短路径）</li></ol><h3 id="4-2实验代码"><a href="#4-2实验代码" class="headerlink" title="4.2实验代码"></a>4.2实验代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//初始状态压入队列</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A* Fn=Gn+Hn：\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (!A_open.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-comment">//弹出一个状态</span><br>        borad* cur = A_open.<span class="hljs-built_in">top</span>();<br>        A_open.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">//hn=Fn-depth为与目标状态的曼哈顿距离，为0即到达目标状态</span><br>        <span class="hljs-keyword">if</span> (cur-&gt;Fn - cur-&gt;depth == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;到达目标状态\nclose表大小为%d\n目标状态深度为%d\n\n&quot;</span>, close.<span class="hljs-built_in">size</span>(), cur-&gt;depth);<br>            <span class="hljs-comment">//printans(cur);</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//存放int格式的状态</span><br>        <span class="hljs-keyword">int</span> intstatus = <span class="hljs-built_in">status2int</span>(cur-&gt;status);<br>        <span class="hljs-comment">//出现重复状态</span><br>        <span class="hljs-keyword">if</span> (close.<span class="hljs-built_in">count</span>(intstatus)) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">//加入close表，表示已访问过</span><br>        close.<span class="hljs-built_in">insert</span>(intstatus);<br>        <span class="hljs-comment">//获得0的坐标</span><br>        <span class="hljs-keyword">int</span> zeroindex = <span class="hljs-built_in">getindex</span>(cur-&gt;status, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-comment">//新建节点，复制当前棋盘状态，深度+1</span><br>            borad* temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">borad</span>(cur, cur-&gt;status, cur-&gt;depth + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-comment">//0向四个方向移动</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">swapnum</span>(zeroindex, zeroindex + go[i], temp-&gt;status)) &#123;<br>                <span class="hljs-comment">//移动成功</span><br>                <span class="hljs-comment">//计算启发函数值，并更新节点</span><br>                temp-&gt;Fn = temp-&gt;depth + <span class="hljs-built_in">hn</span>(temp-&gt;status, target);<br>                <span class="hljs-comment">//加入A_open表</span><br>                A_open.<span class="hljs-built_in">push</span>(temp);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//移动失败</span><br>                <span class="hljs-built_in"><span class="hljs-keyword">delete</span></span>(temp);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//清空close表</span><br>    close.<span class="hljs-built_in">clear</span>();<br></code></pre></td></tr></table></figure><h3 id="4-3实验结果"><a href="#4-3实验结果" class="headerlink" title="4.3实验结果"></a>4.3实验结果</h3><p><img src="http://img.enderfga.cn/img/image-20211019170210256.png" alt="image-20211019170210256"></p><p>如图所示，A*搜索算法在解决八数码问题时取得了最优的结果，无论是时间复杂度还是空间复杂度都得到了极大的优化。但是𝐴∗算法作为一种预测算法，不能保证解为最优解。</p><h3 id="4-4实验总结"><a href="#4-4实验总结" class="headerlink" title="4.4实验总结"></a>4.4实验总结</h3><ul><li>优点：A*算法在绝大多数的情况下，在性能方面都远远优与DFS和BFS。算法的主要运行性能，取决于估价函数f的选取。</li><li>缺点：由于算法本身的特点，因此根据估价函数找到的解路径不一定是最优解路径。</li></ul><h2 id="五、效率比较及优缺点"><a href="#五、效率比较及优缺点" class="headerlink" title="五、效率比较及优缺点"></a>五、效率比较及优缺点</h2><h3 id="5-1概念"><a href="#5-1概念" class="headerlink" title="5.1概念"></a>5.1概念</h3><p>首先给出几个用来进行效率比价的变量：</p><ol><li>深度(D)：从初始节点到达目标的路径深度；</li><li>时间(T)：搜索程序运行的时间,单位毫秒(ms)；</li><li>状态数(N)：整个过程中生成的状态总数；</li><li><p>外显率(P)：搜索工程中,从初始节点向目标节点进行搜索的区域的宽度。</p><p>其中时间使用C标准库函数 clock_t clock(void) 计算获得，返回三个算法程序执行起，处理器时钟所使用的时间。为了获取 CPU 所使用的秒数，必须除以 CLOCKS_PER_SEC。而外显率定义为以下公式计算获得：</p><script type="math/tex; mode=display">P=\frac{D}{N},P\in \left( 0,1\right]</script></li></ol><h3 id="5-2-实验数据分析"><a href="#5-2-实验数据分析" class="headerlink" title="5.2 实验数据分析"></a>5.2 实验数据分析</h3><p>数据说明：</p><ol><li>环境为Windows系统，语言为C++，使用clock()函数输出算法时间；</li><li>目标状态1 2 3 4 5 6 7 8 0；</li><li>由于运行时间受电脑影响很大，具有一定的随机性，因而每个状态执行3次,取平均数作为最终结果时间。</li></ol><p>以下为题目所给初始状态产生的数据：</p><div class="table-container"><table><thead><tr><th></th><th>深度D</th><th>时间T</th><th>状态数N</th><th>外显率P</th></tr></thead><tbody><tr><td>DFS</td><td>46312</td><td>0.295000</td><td>47788</td><td>0.969113</td></tr><tr><td>BFS</td><td>22</td><td>0.793000</td><td>102868</td><td>0.000213</td></tr><tr><td>A*</td><td>22</td><td>0.005000</td><td>503</td><td>0.043737</td></tr></tbody></table></div><p>以下为随机初始状态产生的数据：</p><div class="table-container"><table><thead><tr><th>状态数N</th><th>DFS</th><th>BFS</th><th>A*</th></tr></thead><tbody><tr><td>1</td><td>37809</td><td>60897</td><td>1114</td></tr><tr><td>2</td><td>13571</td><td>129921</td><td>1289</td></tr><tr><td>3</td><td>39006</td><td>36948</td><td>926</td></tr><tr><td>4</td><td>56982</td><td>38459</td><td>182</td></tr><tr><td>5</td><td>101524</td><td>23754</td><td>610</td></tr><tr><td>6</td><td>62529</td><td>85828</td><td>1175</td></tr><tr><td>7</td><td>119230</td><td>43684</td><td>750</td></tr><tr><td>8</td><td>72091</td><td>129811</td><td>2492</td></tr><tr><td>9</td><td>68716</td><td>40819</td><td>393</td></tr><tr><td>10</td><td>128887</td><td>159858</td><td>6852</td></tr></tbody></table></div><p><img src="http://img.enderfga.cn/img/image-20211019211427628.png" alt="image-20211019211427628"></p><div class="table-container"><table><thead><tr><th>深度D</th><th>DFS</th><th>BFS</th><th>A*</th></tr></thead><tbody><tr><td>1</td><td>36756</td><td>20</td><td>20</td></tr><tr><td>2</td><td>13268</td><td>24</td><td>24</td></tr><tr><td>3</td><td>37943</td><td>19</td><td>19</td></tr><tr><td>4</td><td>55007</td><td>19</td><td>19</td></tr><tr><td>5</td><td>95102</td><td>18</td><td>20</td></tr><tr><td>6</td><td>60172</td><td>22</td><td>22</td></tr><tr><td>7</td><td>108378</td><td>20</td><td>20</td></tr><tr><td>8</td><td>69118</td><td>24</td><td>24</td></tr><tr><td>9</td><td>66096</td><td>20</td><td>20</td></tr><tr><td>10</td><td>113307</td><td>25</td><td>27</td></tr></tbody></table></div><p><img src="http://img.enderfga.cn/img/image-20211019211930017.png" alt="image-20211019211930017"></p><div class="table-container"><table><thead><tr><th>时间T</th><th>DFS</th><th>BFS</th><th>A*</th></tr></thead><tbody><tr><td>1</td><td>0.226</td><td>0.444</td><td>0.011</td></tr><tr><td>2</td><td>0.079</td><td>1.026</td><td>0.012</td></tr><tr><td>3</td><td>0.231</td><td>0.277</td><td>0.01</td></tr><tr><td>4</td><td>0.347</td><td>0.291</td><td>0.002</td></tr><tr><td>5</td><td>0.675</td><td>0.176</td><td>0.006</td></tr><tr><td>6</td><td>0.372</td><td>0.665</td><td>0.011</td></tr><tr><td>7</td><td>0.749</td><td>0.321</td><td>0.007</td></tr><tr><td>8</td><td>0.429</td><td>0.997</td><td>0.024</td></tr><tr><td>9</td><td>0.439</td><td>0.302</td><td>0.003</td></tr><tr><td>10</td><td>0.796</td><td>1.367</td><td>0.068</td></tr></tbody></table></div><p><img src="http://img.enderfga.cn/img/image-20211019212019369.png" alt="image-20211019212019369"></p><div class="table-container"><table><thead><tr><th>外显率P</th><th>DFS</th><th>BFS</th><th>A*</th></tr></thead><tbody><tr><td>1</td><td>0.000972</td><td>0.000328</td><td>0.017953</td></tr><tr><td>2</td><td>0.000978</td><td>0.000185</td><td>0.018619</td></tr><tr><td>3</td><td>0.000973</td><td>0.000514</td><td>0.020518</td></tr><tr><td>4</td><td>0.000965</td><td>0.000494</td><td>0.104396</td></tr><tr><td>5</td><td>0.000937</td><td>0.000758</td><td>0.032787</td></tr><tr><td>6</td><td>0.000962</td><td>0.000256</td><td>0.018723</td></tr><tr><td>7</td><td>0.000909</td><td>0.000458</td><td>0.026667</td></tr><tr><td>8</td><td>0.000959</td><td>0.000185</td><td>0.009631</td></tr><tr><td>9</td><td>0.000962</td><td>0.00049</td><td>0.050891</td></tr><tr><td>10</td><td>0.000879</td><td>0.000156</td><td>0.00394</td></tr></tbody></table></div><p><img src="http://img.enderfga.cn/img/image-20211019212230860.png" alt="image-20211019212230860"></p><h3 id="5-3研究结论"><a href="#5-3研究结论" class="headerlink" title="5.3研究结论"></a>5.3研究结论</h3><p>通过研究，可得结论如下：</p><ol><li>DFS搜索效率受深度影响很大，由于深度界限设置得很大，故搜索结点冗余多、速度慢；</li><li>BFS找到的一定是最优解，但是在算法效率上，不一定比DFS好，且远远不如A*算法，同时BFS在搜索深度较深时，产生的冗余结点较多；</li><li>A*算法在效率上相对最优，时间和空间上都比DFS和BFS更优，但缺点是，找到的解不一定是最优解。</li></ol><h2 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h2><p>[1]付宏杰,王雪莹,周健,周孙静,朱珠,张俊余.八数码问题解法效率比较及改进研究[J].软件导刊,2016,15(09):41-45.</p><p>[2]StuartJ.Russell,PeterNorvig. 人工智能:一种现代的方法(第3版)[J]. 计算机教育, 2011(15):68-68.</p><p>[3]Thomas,H.Cormen,Charles,E.Leiserson,Ronald,L.Rivest,Clifford,Stein,殷建平,徐云,王刚,刘晓光,苏明,邹恒明,王宏志. 算法导论(原书第3版)[J]. 计算机教育(10期):51-51.</p><p><img src="http://img.enderfga.cn/A2.jpg" alt="A2"></p>]]></content>
    
    
    
    <tags>
      
      <tag>course</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Texlive+VScode</title>
    <link href="/2021/10/18/latex/"/>
    <url>/2021/10/18/latex/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>搭建Latex环境：Texlive+VScode 相关记录</p><span id="more"></span><h2 id="1-安装-Texlive"><a href="#1-安装-Texlive" class="headerlink" title="1.安装 Texlive"></a>1.安装 Texlive</h2><p>鉴于我校没有（我知道的）可用开源软件镜像站，所以在到清华大学开源软件镜像站的<a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/">texlive</a>页下载。</p><p><a href="https://imgtu.com/i/5UYncq"><img src="https://z3.ax1x.com/2021/10/18/5UYncq.png" alt="5UYncq.png"></a></p><p>可能由于更新导致你打开之后的页面与上面的内容不一致，总之下载最新的texlive<em>*</em>.iso，虽然很大但各种宏包齐全，用起来能省去各种麻烦。</p><p>在带宽扩容之后的校园网加持下，不用几年就能下载完这个iso文件了。</p><p>如果你是windows 7甚至xp用户，我建议你把iso文件解压然后进行后续操作。</p><p>如果是windows 10/11，系统自带虚拟光驱，直接双击进入即可。</p><p>（ linux/macOS 我不了解，省略）效果如图：</p><p><a href="https://imgtu.com/i/5UUe9H"><img src="https://z3.ax1x.com/2021/10/18/5UUe9H.png" alt="5UUe9H.png"></a></p><p>双击或者右键以管理员身份运行install-tl-advanced.bat，可以点进<strong>Advanced</strong>进入高级安装，点击<strong>Customize</strong>来取消你不需要安装的宏包，比如非中英的语言包，这里我只修改了安装目录，最后开始漫长的等待。</p><p><a href="https://imgtu.com/i/5UaCGQ"><img src="https://z3.ax1x.com/2021/10/18/5UaCGQ.png" alt="5UaCGQ.png"></a></p><p>（安装TeXworks前端也可以取消掉，毕竟都打算用vscode了，加上前面说的语言包之类的，可以省个1G左右，我想着留条后路就啥都没改，也不缺这点空间）</p><p>（在我的电脑上一共安装了57 min 56 s，教程都快写完了，还没有装好）</p><h2 id="2-安装-VSCode"><a href="#2-安装-VSCode" class="headerlink" title="2. 安装 VSCode"></a>2. 安装 VSCode</h2><p>到<a href="https://code.visualstudio.com/Download">官网</a>根据你的系统选择下载安装即可，这部分应该大多数人都安装过了，没什么需要注意的。</p><p><a href="https://imgtu.com/i/5Ud4hD"><img src="https://z3.ax1x.com/2021/10/18/5Ud4hD.png" alt="5Ud4hD.png"></a></p><p>安装完成之后可以在应用商店挑选各种提高使用体验的扩展，跟本文相关的主要是<strong>Latex Workshop</strong>。</p><p><a href="https://imgtu.com/i/5U0KJS"><img src="https://z3.ax1x.com/2021/10/18/5U0KJS.png" alt="5U0KJS.png"></a></p><p>安装完成之后，可以创建或者打开一个tex文件，此时代码已经被高亮显示了。</p><p><a href="https://imgtu.com/i/5U560K"><img src="https://z3.ax1x.com/2021/10/18/5U560K.png" alt="5U560K.png"></a></p><p>按下快捷键Ctrl+Alt+B（build latex project），顺利生成，效果不错。</p><p><a href="https://imgtu.com/i/5U5xcn"><img src="https://z3.ax1x.com/2021/10/18/5U5xcn.png" alt="5U5xcn.png"></a></p><h2 id="3-配置-VSCode-的-插件"><a href="#3-配置-VSCode-的-插件" class="headerlink" title="3. 配置 VSCode 的 插件"></a>3. 配置 VSCode 的 插件</h2><p>按下F1或者Ctrl＋shift＋P，输入setjson，选择第三个（如图所示）。</p><p><a href="https://imgtu.com/i/5Uo9xA"><img src="https://z3.ax1x.com/2021/10/18/5Uo9xA.png" alt="5Uo9xA.png"></a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs json">&quot;latex-workshop.view.pdf.viewer&quot;: &quot;tab&quot;,<br>    &quot;latex-workshop.latex.recipes&quot;: [<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;xelatex ➞ bibtex ➞ xelatex × 2&quot;</span>,<br>            <span class="hljs-attr">&quot;tools&quot;</span>: [<br>                <span class="hljs-string">&quot;xelatex&quot;</span>,<br>                <span class="hljs-string">&quot;bibtex&quot;</span>,<br>                <span class="hljs-string">&quot;xelatex&quot;</span>,<br>                <span class="hljs-string">&quot;xelatex&quot;</span><br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;latexmk 🔃&quot;</span>,<br>            <span class="hljs-attr">&quot;tools&quot;</span>: [<br>                <span class="hljs-string">&quot;latexmk&quot;</span><br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;latexmk (latexmkrc)&quot;</span>,<br>            <span class="hljs-attr">&quot;tools&quot;</span>: [<br>                <span class="hljs-string">&quot;latexmk_rconly&quot;</span><br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;latexmk (lualatex)&quot;</span>,<br>            <span class="hljs-attr">&quot;tools&quot;</span>: [<br>                <span class="hljs-string">&quot;lualatexmk&quot;</span><br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;pdflatex ➞ bibtex ➞ pdflatex × 2&quot;</span>,<br>            <span class="hljs-attr">&quot;tools&quot;</span>: [<br>                <span class="hljs-string">&quot;pdflatex&quot;</span>,<br>                <span class="hljs-string">&quot;bibtex&quot;</span>,<br>                <span class="hljs-string">&quot;pdflatex&quot;</span>,<br>                <span class="hljs-string">&quot;pdflatex&quot;</span><br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Compile Rnw files&quot;</span>,<br>            <span class="hljs-attr">&quot;tools&quot;</span>: [<br>                <span class="hljs-string">&quot;rnw2tex&quot;</span>,<br>                <span class="hljs-string">&quot;latexmk&quot;</span><br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Compile Jnw files&quot;</span>,<br>            <span class="hljs-attr">&quot;tools&quot;</span>: [<br>                <span class="hljs-string">&quot;jnw2tex&quot;</span>,<br>                <span class="hljs-string">&quot;latexmk&quot;</span><br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;tectonic&quot;</span>,<br>            <span class="hljs-attr">&quot;tools&quot;</span>: [<br>                <span class="hljs-string">&quot;tectonic&quot;</span><br>            ]<br>        &#125;<br>    ],<br>    &quot;latex-workshop.latex.tools&quot;: [<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;xelatex&quot;</span>,<br>            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;xelatex&quot;</span>,<br>            <span class="hljs-attr">&quot;args&quot;</span>: [<br>                <span class="hljs-string">&quot;-synctex=1&quot;</span>,<br>                <span class="hljs-string">&quot;-interaction=nonstopmode&quot;</span>,<br>                <span class="hljs-string">&quot;-file-line-error&quot;</span>,<br>                <span class="hljs-string">&quot;--shell-escape&quot;</span>,<br>                <span class="hljs-string">&quot;%DOC%&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;&#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;latexmk&quot;</span>,<br>            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;latexmk&quot;</span>,<br>            <span class="hljs-attr">&quot;args&quot;</span>: [<br>                <span class="hljs-string">&quot;-synctex=1&quot;</span>,<br>                <span class="hljs-string">&quot;-interaction=nonstopmode&quot;</span>,<br>                <span class="hljs-string">&quot;-file-line-error&quot;</span>,<br>                <span class="hljs-string">&quot;-pdf&quot;</span>,<br>                <span class="hljs-string">&quot;-outdir=%OUTDIR%&quot;</span>,<br>                <span class="hljs-string">&quot;%DOC%&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;&#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;lualatexmk&quot;</span>,<br>            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;latexmk&quot;</span>,<br>            <span class="hljs-attr">&quot;args&quot;</span>: [<br>                <span class="hljs-string">&quot;-synctex=1&quot;</span>,<br>                <span class="hljs-string">&quot;-interaction=nonstopmode&quot;</span>,<br>                <span class="hljs-string">&quot;-file-line-error&quot;</span>,<br>                <span class="hljs-string">&quot;-lualatex&quot;</span>,<br>                <span class="hljs-string">&quot;-outdir=%OUTDIR%&quot;</span>,<br>                <span class="hljs-string">&quot;%DOC%&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;&#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;latexmk_rconly&quot;</span>,<br>            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;latexmk&quot;</span>,<br>            <span class="hljs-attr">&quot;args&quot;</span>: [<br>                <span class="hljs-string">&quot;%DOC%&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;&#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;pdflatex&quot;</span>,<br>            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;pdflatex&quot;</span>,<br>            <span class="hljs-attr">&quot;args&quot;</span>: [<br>                <span class="hljs-string">&quot;-synctex=1&quot;</span>,<br>                <span class="hljs-string">&quot;-interaction=nonstopmode&quot;</span>,<br>                <span class="hljs-string">&quot;-file-line-error&quot;</span>,<br>                <span class="hljs-string">&quot;%DOC%&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;&#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;bibtex&quot;</span>,<br>            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;bibtex&quot;</span>,<br>            <span class="hljs-attr">&quot;args&quot;</span>: [<br>                <span class="hljs-string">&quot;%DOCFILE%&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;&#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;rnw2tex&quot;</span>,<br>            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;Rscript&quot;</span>,<br>            <span class="hljs-attr">&quot;args&quot;</span>: [<br>                <span class="hljs-string">&quot;-e&quot;</span>,<br>                <span class="hljs-string">&quot;knitr::opts_knit$set(concordance = TRUE); knitr::knit(&#x27;%DOCFILE_EXT%&#x27;)&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;&#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;jnw2tex&quot;</span>,<br>            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;julia&quot;</span>,<br>            <span class="hljs-attr">&quot;args&quot;</span>: [<br>                <span class="hljs-string">&quot;-e&quot;</span>,<br>                <span class="hljs-string">&quot;using Weave; weave(\&quot;%DOC_EXT%\&quot;, doctype=\&quot;tex\&quot;)&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;&#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;jnw2texmintex&quot;</span>,<br>            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;julia&quot;</span>,<br>            <span class="hljs-attr">&quot;args&quot;</span>: [<br>                <span class="hljs-string">&quot;-e&quot;</span>,<br>                <span class="hljs-string">&quot;using Weave; weave(\&quot;%DOC_EXT%\&quot;, doctype=\&quot;texminted\&quot;)&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;&#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;tectonic&quot;</span>,<br>            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;tectonic&quot;</span>,<br>            <span class="hljs-attr">&quot;args&quot;</span>: [<br>                <span class="hljs-string">&quot;--synctex&quot;</span>,<br>                <span class="hljs-string">&quot;--keep-logs&quot;</span>,<br>                <span class="hljs-string">&quot;%DOC%.tex&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;&#125;<br>        &#125;<br>    ],<br>    &quot;latex-workshop.latex.recipe.default&quot;: &quot;first&quot;<br></code></pre></td></tr></table></figure><ul><li>Ctrl+Alt+B 是编译</li><li>Ctrl+Alt+V是编译+预览pdf</li></ul><p>我最开始写这些其实是想要把中大的foxitpdf设置成默认的pdf预览软件，不过最终效果并不好，所以作罢。</p><p>上面这些设置主要是因为默认的编译工具是 latexmk，由于不需要用到 latexmk，因此把其修改为中文环境常用的 xelatex；将 tools 中的 %DOC%替换成%DOCFILE%就可以支持编译中文路径下的文件了。</p><p>若要自动处理bib参考文献，在开头加上：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">%!<span class="hljs-keyword">BIB </span>program = <span class="hljs-keyword">bibtex </span> <br></code></pre></td></tr></table></figure><p>若要使用pdflatex编译（纯英文文档），在开头加上：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">%!TEX <span class="hljs-keyword">program</span> = pdflatex<br></code></pre></td></tr></table></figure><p>还可以研究的设置有很多，什么正向搜索反向搜索之类的，有兴趣的朋友可以自行了解。</p><p><a href="https://ericp.cn/cmd">公式指导手册</a></p><p>如果中文无法显示就加上这一句：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">\usepackage<span class="hljs-selector-attr">[UTF8]</span>&#123;ctex&#125;<br></code></pre></td></tr></table></figure><p>Latex的相关公式及使用就不再赘述了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>course</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello world!</title>
    <link href="/2021/04/25/Helloworld/"/>
    <url>/2021/04/25/Helloworld/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>My First blog:Something about Enderfga</p><span id="more"></span><h1 id="Think-twice-code-once"><a href="#Think-twice-code-once" class="headerlink" title="Think twice, code once."></a>Think twice, code once.</h1>        <div id="aplayer-msKhNqRB" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-msKhNqRB"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "Never Coming Back",              author: "Evan Call",              url: "https://cdn.jsdelivr.net/gh/Enderfga/Enderfga/Backup/music.mp3",              pic: "https://z3.ax1x.com/2021/04/24/cvhTxI.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p><a href="https://imgtu.com/i/gAAR54"><img src="https://z3.ax1x.com/2021/04/30/gAAR54.jpg" alt="gAAR54.jpg"></a></p><p>自打成为一个程序猿开始，翻阅博客文章学习就成了我的日常（质量确实有够参差不齐···），CSDN、博客园、简书、知乎、GitHub等我都经常光顾，于是萌生了自己写blog的想法，苦于技术力不足一直搁置至今（现在也不怎么样哈哈哈）。在GZTime的协助下，我自己的小破站终于建成啦~希望我早日产出点技术性文章，现在只能拿来记流水账了······</p><h1 id="Enderfga？"><a href="#Enderfga？" class="headerlink" title="Enderfga？"></a>Enderfga？</h1><p>关于我的id来源其实挺傻的，在成为程序猿之前我是一名资深游戏玩家，我还清楚地记得我接触的第一款网络游戏叫植物大战僵尸OL，然后是洛克王国，卡布西游，奥奇传说···直到六年级那年，我玩了第一款我愿将其称之为“游戏”或者说是“第九艺术”的作品——Minecraft。</p><p><a href="https://imgtu.com/i/gAAhG9"><img src="https://z3.ax1x.com/2021/04/30/gAAhG9.jpg" alt="gAAhG9.jpg"></a></p><p>MC一直陪我走到今天，我对编程的兴趣基本也是萌芽于此。虽然课程里没有涉及Java，但有机会我还是会争取好好自学Java和C#的。至于MC，不管怎么更新换代，mod/红石/命令方块/欺负末影龙/种田养猪都挺吸引我的。</p><figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mizar">EnderDragon—Enderman-Enderfga,Doesn&#x27;t <span class="hljs-keyword">that</span> sound cool?<br>&quot;This <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> the <span class="hljs-keyword">end</span>,this <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> even the beginning <span class="hljs-keyword">of</span><br> the <span class="hljs-keyword">end</span>,but,perhaps,the <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> the beginning.&quot;<br>                   ——Winston Leonard Spencer Churchill<br></code></pre></td></tr></table></figure><p>这个id不知不觉间居然用了七年了，从个别网站到所有账户统一，我也不舍得换新的了（在互联网上统一貌似不是什么好习惯，还容易查到我年轻的时候留下的黑历史···）只希望外国友人看到这么沙雕的英语名不要笑我哈哈哈。（谷歌娘念的好可爱！）</p><p><a href="https://imgtu.com/i/gAm5Bq"><img src="https://z3.ax1x.com/2021/04/30/gAm5Bq.jpg" alt="gAm5Bq.jpg"></a></p><h1 id="ACGN-引きこもり"><a href="#ACGN-引きこもり" class="headerlink" title="ACGN-引きこもり"></a>ACGN-引きこもり</h1><p><a href="https://imgtu.com/i/fgsIRU"><img src="https://z3.ax1x.com/2021/08/15/fgsIRU.jpg" alt="fgsIRU.jpg"></a></p><div style="text-align:center">宿舍一角</div><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><p>二次元浓度++；</p><p>很庆幸自己的童年有虹猫蓝兔七侠传，洛洛历险记，蓝猫淘气三千问，秦时明月，东方神娃······等等优秀国产作品陪伴（甚至顺便在里面学会了普通话），后来在星空卫视的《动漫先锋》栏目里入坑了日漫：犬夜叉，海贼王，钢之炼金术师，七龙珠，<strong>火影忍者</strong>，<strong>银魂</strong>······没有这几部番，肯定也没有现在时而中二热血，时而沙雕废柴的我。<br>至于B站的入站时间是2015-07-10 17:20:10（这是通过答题的时间，终于不是游客了！）（用时间戳查的，我怎么可能记得这种东西）</p><p><a href="https://imgtu.com/i/gZkFVf"><img src="https://z3.ax1x.com/2021/05/01/gZkFVf.jpg" alt="gZkFVf.jpg"></a></p><p>那个时候特地去看了某科学的超电磁炮，lovelive什么的，四舍五入也算是二刺猿入门了（吧？）</p><p>从零开始的异世界生活，一拳超人，灵能百分百，小林家的龙女仆，干物妹小埋，刺客伍六七，<strong>紫罗兰永恒花园</strong>······这些年看番的频率虽然少了，但那种每周等更新看番的热情已经刻进DNA了。每顿饭的时候刷刷B站的剪辑还能感慨一下“爷青回”，泪目一会。</p><p><a href="https://imgtu.com/i/gAYknO"><img src="https://z3.ax1x.com/2021/04/30/gAYknO.jpg" alt="gAYknO.jpg"></a></p><p>另外我的头像其实是桂小太郎，不过因为版权意识的加深，可能有机会还是得重画一个。</p><p><a href="https://imgtu.com/i/fgyay4"><img src="https://z3.ax1x.com/2021/08/15/fgyay4.jpg" alt="fgyay4.jpg"></a></p><p>更新：桂先生成功升级了，参考了尼尔机械纪元中9S的装扮，现在科技感满满！</p><h2 id="Comic"><a href="#Comic" class="headerlink" title="Comic"></a>Comic</h2><p>回忆了一下，我好像不怎么看漫画。起初看漫画是因为死火海更新太慢了，后来在快看上看了几部，记得名字的有阎王不高兴，哑舍，快把我哥带走，<strong>蝉女</strong>。好看是好看，感觉有点像折中选择，不如动画灵动也不如小说全面。</p><p><a href="https://imgtu.com/i/gANmlt"><img src="https://z3.ax1x.com/2021/04/30/gANmlt.jpg" alt="gANmlt.jpg"></a></p><p>已经完全想不起来蝉女讲什么了，但画风针不戳。最近听了《<a href="https://bilibili.com/video/BV1WX4y1G7ok">鉴情师</a>》这首歌才想起来的。</p><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><p>说到这个我可就不困了（zzzzz….）</p><p><a href="https://imgtu.com/i/gV9KCn"><img src="https://z3.ax1x.com/2021/05/01/gV9KCn.jpg" alt="gV9KCn.jpg"></a></p><div style="text-align:center"><iframe width="100%" height="500" src="https://player.bilibili.com/player.html?aid=5868975&bvid=BV1Ts411k73E&cid=9531080&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></iframe></div><p><a href="https://imgtu.com/i/gV9eEQ"><img src="https://z3.ax1x.com/2021/05/01/gV9eEQ.jpg" alt="gV9eEQ.jpg"></a></p><div style="text-align:center"><iframe width="100%" height="500" src="https://player.bilibili.com/player.html?aid=460307938&bvid=BV1t5411w723&cid=331362469&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></iframe></div><p><a href="https://imgtu.com/i/gVyodA"><img src="https://z3.ax1x.com/2021/05/01/gVyodA.jpg" alt="gVyodA.jpg"></a></p><div style="text-align:center"><iframe width="100%" height="500" src="https://player.bilibili.com/player.html?aid=12069119&bvid=BV1Wx411q7zb&cid=19911067&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><p>我记得当年进b站答题的时候有一道题让我选出“老头滚动条”的原名，百度的过程中我了解到“上古卷轴5”(老滚)mod的丰富程度堪比MC，中世纪剑与魔法的世界也让我着迷，于是我毅然决然地成为了一名抓根宝（龙裔），但通关的过程中我饱受迷路的困扰：黑灯瞎火的洞窟、乱七八糟的陷阱、不可名状的地图···于是我决定找一款我想怎么走就怎么走的游戏——《Assassin‘s Creed》。一入坑就是10年，我愿时间永远停留在佛罗伦萨塔顶的月圆之夜。库里的全套刺客信条通关了，我又想念剑与魔法的故事了，因为久仰其大名我下载了——《The Witcher 3》。这是一部我最喜欢的游戏，没有之一，这也许就是“第九艺术”吧。三言两语不能表达出其中的波澜壮阔，每一个支线，每一部DLC都值得我一遍又一遍地游玩。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">我吻过凯尔莫罕忽然冷冽而至的白雪，<br>我听过史凯利杰伴着海妖清啸的海风。<br>我仰头饮尽诺威格瑞陈年的矮人烈酒，<br>我策马走遍全威伦最艰险的万水千山。<br>对我而言，家是什么地方。<br>是那抹黑白裙摆的倩影，<br>还是那丁香与醋栗的芬芳。<br></code></pre></td></tr></table></figure><p>给我留下深刻印象的游戏有很多，尼尔里的“世界竟然如此美丽”，2077里的”以我残躯化烈火”，死亡搁浅里的“我在冥滩等你”······希望我的程序猿之路最终可以走到像小岛秀夫那样，拥有自己的工作室，书写自己的艺术。</p><p>（另外上面2B那张图的作者是Wlop，我最喜欢的画师）</p><h2 id="Novel"><a href="#Novel" class="headerlink" title="Novel"></a>Novel</h2><p>我还年轻的时候会看一些天蚕土豆，唐家三少，耳根写的小说······对我的文学水平真是没有半点提升。</p><p>在高二语文老师的耳濡目染下，我一个理工男对文学兴趣盎然。即使很忙，也想抽点时间陶冶情操。</p><div style="text-align:center">落霞与孤鹜齐飞，秋水共长天一色</div><p><a href="https://imgtu.com/i/gV41qf"><img src="https://z3.ax1x.com/2021/05/01/gV41qf.jpg" alt="gV41qf.jpg"></a></p><p>除了诗与词，还记得名字的书只剩下《巨人的陨落》、《三体》、《外婆的道歉信》、《自由在高处》······</p><p>剩下的各种悬疑侦探小说就不列举了（不过强推一手《神探夏洛克》《POI疑犯追踪》）。</p><h2 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h2><p>我这个人听的歌有亿点点杂，基本歌单里什么都沾一点（二次元&amp;欧美占比较大）</p><p>特地开了一个Music版块都是因为——hanser！</p><div style="text-align:center"><iframe width="100%" height="500" src="https://player.bilibili.com/player.html?aid=4848309&bvid=BV1Cs411i7B1&cid=7870718&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><p>2016-10-01至今，永远单推憨憨！</p><p><a href="https://imgtu.com/i/4jdP0g"><img src="https://z3.ax1x.com/2021/10/05/4jdP0g.jpg" alt="4jdP0g.jpg"></a></p><h1 id="Enderfga。"><a href="#Enderfga。" class="headerlink" title="Enderfga。"></a>Enderfga。</h1><p>不知不觉写了好多废话了······</p><p>总之，大学生活开始了，希望我能当好一个神奇海螺/哆啦安梦。</p><div align="right">----Nothing is true，everything is permitted.</div>]]></content>
    
    
    
    <tags>
      
      <tag>self</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
